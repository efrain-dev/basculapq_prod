{"version":3,"file":"css/app.6207befe.css","mappings":"AA6FA,iBACA,oBACA,qCACA,sBACA,WACA,gBACA,aACA,gBACA,gBACA,WACA,CCrDA,oBACA,UACA,CAGA,0BACA,kBACA,CAGA,0BACA,eACA,CAGA,gCACA,eACA,CACA,KACA,sBACA,yDACA,4BACA,sBACA,wBACA,SACA,UACA,aACA,mBACA,sBACA,CACA,KACA,8CACA,eACA,WACA,YACA,WAGA,aACA,uBACA,sBAEA,CACA,cAPA,eACA,gBAIA,aAOA,CALA,SAIA,WACA,CC07CA,4BACA,eACA,CACA,uCACA,yBACA,WACA,eACA,eACA,CACA,+BACA,WACA,YACA,gBACA,CAEA,oCACA,eACA,yBACA,sBAEA,gBACA,CACA,8BACA,wBACA","sources":["webpack://basculaspq/./src/views/LoginView.vue","webpack://basculaspq/./src/App.vue","webpack://basculaspq/./src/views/WeightingView.vue"],"sourcesContent":["<template>\n  <div class=\"login-container shadow\">\n    <div class=\"m-auto p-3\">\n      <img src=\"/icono-neporsa.jpg\" alt=\"Icono de Neporsa\" />\n    </div>\n    <div class=\"mb-3\">\n      <label class=\"form-label\">Usuario</label>\n      <input type=\"text\" class=\"form-control\" v-model=\"username\" />\n    </div>\n    <div class=\"mb-3\">\n      <label class=\"form-label\">Contrase침a</label>\n      <input\n        type=\"password\"\n        class=\"form-control\"\n        v-model=\"password\"\n        @keyup.enter=\"login\"\n      />\n    </div>\n    <div class=\"mb-3\">\n      <label class=\"form-label\">Bascula</label>\n      <select\n        type=\"text\"\n        class=\"form-control\"\n        v-model=\"bascula\"\n        @keyup.enter=\"login\"\n        @change=\"login\"\n      >\n        <option value=\"0\" selected>Seleccionar Opci칩n</option>\n        <option value=\"1\">Bascula 1</option>\n        <option value=\"2\">Bascula 2</option>\n        <option value=\"3\">Bascula 3</option>\n        <option value=\"4\">Bascula 4</option>\n        <option value=\"5\">Bascula 5</option>\n        <option value=\"6\">Bascula 6</option>\n        <option value=\"7\">Bascula 7</option>\n      </select>\n    </div>\n    <div class=\"text-center\">\n      <button type=\"button\" class=\"btn btn-success btn-lg\" @click=\"login\">\n        Acceder\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport authService from \"@/services/authService\";\nimport { linearAlert } from \"@/utils/swalAlerts\";\nexport default {\n  data: () => ({\n    username: \"\",\n    password: \"\",\n    bascula: 0,\n  }),\n\n  methods: {\n    async test() {\n      await linearAlert(\"Exito\", \"Ingresado con exito\", \"success\");\n    },\n    async login() {\n      try {\n        if (this.isFormFilled) {\n          const { username, password, bascula } = this;\n          await authService.login({ username, password });\n          localStorage.setItem(\"username\", username);\n          localStorage.setItem(\"password\", password);\n          localStorage.setItem(\"bascula\", bascula);\n          await linearAlert(\"Exito\", \"Ingresado con exito\", \"success\");\n          this.$emit(\"logged\");\n        } else {\n          await linearAlert(\n            \"Advertencia\",\n            \"Por favor llenar el formulario\",\n            \"warning\",\n            3000,\n            false\n          );\n        }\n      } catch (error) {\n        await linearAlert(\"Error\", error, \"error\", 3000, false);\n        console.error(error);\n      }\n    },\n  },\n  computed: {\n    isFormFilled() {\n      return this.username && this.password && this.bascula !== 0;\n    },\n  },\n};\n</script>\n\n<style>\n.login-container {\n  border-radius: 0.5rem;\n  box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;\n  background-color: white;\n  color: black;\n  font-weight: bold;\n  padding: 2rem;\n  max-width: 50rem;\n  min-width: 20rem;\n  margin: auto;\n}\n</style>","<template>\n  <div id=\"app\">\n    <div class=\"content\" v-if=\"!isLoggedIn\">\n      <LoginView @logged=\"navigate\" />\n    </div>\n    <NavBar @logout=\"logout\" v-else>\n      <div class=\"content\">\n        <router-view></router-view>\n      </div>\n    </NavBar>\n  </div>\n</template>\n\n<script>\nimport LoginView from \"./views/LoginView.vue\";\nimport NavBar from \"@/components/NavBar.vue\";\n\nimport { linearAlert } from \"./utils/swalAlerts\";\nexport default {\n  name: \"App\",\n  components: {\n    LoginView,\n    NavBar,\n  },\n  data: () => ({\n    isLoggedIn: false,\n  }),\n  methods: {\n    async logout() {\n      try {\n        console.log(\"init logout\");\n        localStorage.setItem(\"username\", undefined);\n        localStorage.setItem(\"password\", undefined);\n        await linearAlert(\"Exito\", \"Sesi칩n cerrada con exito\", \"success\");\n        this.$router.push(\"/\");\n        this.isLoggedIn = false;\n        console.log(\"end logout\");\n      } catch (error) {\n        await linearAlert(\"Error\", error, \"error\", 3000, false);\n        console.error(error);\n      }\n    },\n    navigate() {\n      this.isLoggedIn = true;\n    },\n  },\n};\n</script>\n\n<style>\n*::-webkit-scrollbar {\n  width: 10px;\n}\n\n/* Track */\n*::-webkit-scrollbar-track {\n  background: #f1f1f1;\n}\n\n/* Handle */\n*::-webkit-scrollbar-thumb {\n  background: #888;\n}\n\n/* Handle on hover */\n*::-webkit-scrollbar-thumb:hover {\n  background: #555;\n}\nbody {\n  width: 100vw !important;\n  background-image: url(\"~/public/puerto-quetzal.png\");\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center;\n  margin: 0;\n  padding: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  padding: 0rem 2rem;\n  color: white;\n  height: 100%;\n  width: 100%;\n  max-width: 100%;\n  max-height: 100%;\n  display: flex;\n  align-items: flex-start; /* Align items to the top */\n  justify-content: center;\n  overflow: auto;\n}\n.content {\n  max-width: 100%; /* Ensure content doesn't overflow horizontally */\n  max-height: 100%; /* Ensure content doesn't overflow vertically */\n  overflow: auto; /* Allow inner content to be scrollable if needed */\n  margin: auto;\n}\n</style>\n","<template>\n  <div class=\"bg-white p-3 m-3 rounded shadow\">\n    <!-- Weighting section -->\n    <section>\n      <h3 class=\"text-center text-black fw-bold\">Pesaje de Camiones</h3>\n      <div class=\"row mt-1\">\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Ciclo</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control writeable\"\n                v-model=\"headerCycle\"\n                :disabled=\"isLoading\"\n                @change=\"getHeaderAndWeightData\"\n                tabindex=\"1\"\n              />\n            </div>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                v-model=\"headerCycleDate\"\n                readonly\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Licencia</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                readonly\n                v-model=\"headerLicenseCountry\"\n              />\n            </div>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                readonly\n                v-model=\"headerLicenseNumber\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"row mt-1\">\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Transporte</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                v-model=\"headerCompany\"\n                readonly\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Piloto</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                readonly\n                v-model=\"headerPilot\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"row mt-1\">\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Placa</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                readonly\n                v-model=\"headerPlateCountry\"\n              />\n            </div>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                readonly\n                v-model=\"headerPlateNumber\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Observaci칩n</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                readonly\n                v-model=\"headerObservation\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"row mt-1 border-bottom pb-2\">\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Ingreso Puerto</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                readonly\n                v-model=\"headerEntryDate\"\n              />\n            </div>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                readonly\n                v-model=\"headerEntryHour\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Tipo Cami칩n</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                readonly\n                v-model=\"headerTruckType\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n    <!-- Movements section -->\n    <section>\n      <div class=\"row mt-1\">\n        <h4 class=\"text-center text-black fw-bold\">\n          Informaci칩n de Movimientos\n        </h4>\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Num. Registro</label>\n            <div class=\"col\">\n              <input\n                type=\"number\"\n                class=\"form-control\"\n                v-model=\"movementRegistryNumber\"\n                @change=\"getWeightData\"\n                readonly\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"row mt-1\">\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Peso E.</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                readonly\n                v-model=\"movementEntryWeight\"\n              />\n            </div>\n          </div>\n        </div>\n\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Fecha E.</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                readonly\n                v-model=\"movementEntryDate\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Hora E.</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                readonly\n                v-model=\"movementEntryTime\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Empresa E.</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                readonly\n                v-model=\"movementEntryBascName\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Bascula E.</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                readonly\n                v-model=\"movementEntryBascNumber\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Boleta E.</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                readonly\n                v-model=\"movementEntryBoleta\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Ticket E.</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control writeable\"\n                v-model=\"movementEntryTicket\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"row mt-1 border-bottom pb-2\">\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Peso S.</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                readonly\n                v-model=\"movementExitWeight\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Fecha S.</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                readonly\n                v-model=\"movementExitDate\"\n              />\n            </div>\n          </div>\n        </div>\n\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Tiempo S.</label>\n\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                readonly\n                v-model=\"movementExitTime\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Empresa S.</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                readonly\n                v-model=\"movementExitBascName\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Bascula S.</label>\n\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                readonly\n                v-model=\"movementExitBascNumber\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Boleta S.</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                readonly\n                v-model=\"movementExitBoleta\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Ticket S.</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control writeable\"\n                v-model=\"movementExitTicket\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n    <!-- Container section -->\n    <section>\n      <div class=\"row mt-1\">\n        <h4 class=\"text-center text-black fw-bold\">\n          Informaci칩n de Contenedor\n        </h4>\n\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Num. de Contenedor</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control writeable\"\n                v-model=\"containerNumber\"\n                tabindex=\"2\"\n                @keyup.enter=\"checkAppointment\"\n                @change=\"checkAppointment\"\n                :disabled=\"isLoading\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Peso Tara</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control writeable\"\n                tabindex=\"3\"\n                v-model=\"containerTaraWeight\"\n                :disabled=\"isLoading\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"row mt-1\">\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Peso Neto Carga</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                readonly\n                v-model=\"calculatedContainerNetWeight\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Buque</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                readonly\n                v-model=\"containerShip\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"row mt-1 border-bottom pb-2\">\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Tipo de Carga</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                readonly\n                v-model=\"containerLoadType\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Observaciones</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control writeable\"\n                tabindex=\"4\"\n                v-model=\"containerObservations\"\n                :disabled=\"isLoading\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n    <!-- DUCA section -->\n    <section>\n      <div class=\"row mt-1\">\n        <h4 class=\"text-center text-black fw-bold\">Informaci칩n de Poliza</h4>\n\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">DUCA</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control writeable\"\n                :disabled=\"isLoading\"\n                v-model=\"policyDucaNumber\"\n                @change=\"getDucaAndPolicyData\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">No. BL</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                v-model=\"policyBlNumber\"\n                readonly\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"row mt-1\">\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Consignatario</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                readonly\n                v-model=\"policyCosignee\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Manifiesto</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                readonly\n                v-model=\"policyManifest\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"row mt-1\">\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Poliza</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                readonly\n                v-model=\"policyNumber\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"col\">\n          <div class=\"row\">\n            <label class=\"mb-2 text-black fw-bold\">Peso</label>\n            <div class=\"col\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                readonly\n                v-model=\"policyWeight\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n    <div class=\"row text-center mt-4 justify-content-center gap-3 p-2\">\n      <div class=\"btn-group\" role=\"group\">\n        <button\n          type=\"button\"\n          class=\"btn btn-lg btn-primary\"\n          @click=\"gotoFirstRegistryNumber\"\n          :disabled=\"!isGoBackARegistryNumberPossible\"\n        >\n          Primero\n        </button>\n        <button\n          type=\"button\"\n          class=\"btn btn-lg btn-primary\"\n          @click=\"goBackARegistryNumber\"\n          :disabled=\"!isGoBackARegistryNumberPossible\"\n        >\n          Anterior\n        </button>\n        <button\n          type=\"button\"\n          class=\"btn btn-lg btn-primary\"\n          @click=\"goUpARegistryNumber\"\n          :disabled=\"isLoading\"\n        >\n          Siguiente\n        </button>\n        <button\n          type=\"button\"\n          class=\"btn btn-lg btn-primary\"\n          @click=\"getHeaderAndWeightData(false)\"\n          :disabled=\"isLoading\"\n        >\n          Ultimo\n        </button>\n      </div>\n      <div class=\"btn-group\" role=\"group\"></div>\n\n      <div class=\"btn-group\" role=\"group\">\n        <button\n          type=\"button\"\n          class=\"btn btn-warning btn-lg\"\n          @click=\"resetData\"\n          :disabled=\"isLoading\"\n        >\n          Limpiar\n        </button>\n        <button\n          type=\"button\"\n          class=\"btn btn-success btn-lg\"\n          @click=\"createCycleRegistry\"\n        >\n          Guardar\n        </button>\n        <!-- <button\n          type=\"button\"\n          class=\"btn btn-info btn-lg\"\n          @click=\"checkWeight\"\n          :disabled=\"isLoading\"\n        >\n          Pesar\n        </button>\n        <button\n          type=\"button\"\n          class=\"btn btn-info btn-lg\"\n          @click=\"checkAppointment\"\n          :disabled=\"isLoading\"\n        >\n          Verificar Cita\n        </button> -->\n        <div class=\"btn-group\" style=\"width: 33%\">\n          <button\n            type=\"button\"\n            class=\"btn btn-info btn-lg dropdown-toggle\"\n            :disabled=\"isLoading\"\n            @click=\"actionsMenuActive = !actionsMenuActive\"\n          >\n            Opciones\n          </button>\n          <div\n            :class=\"`dropdown-menu actions-menu ${\n              actionsMenuActive ? 'show' : null\n            }`\"\n          >\n            <a\n              class=\"dropdown-item actions-menu-item\"\n              style=\"cursor: pointer\"\n              @click=\"checkWeight\"\n              >Pesar</a\n            >\n            <a\n              class=\"dropdown-item actions-menu-item\"\n              style=\"cursor: pointer\"\n              @click=\"checkAppointment\"\n              >Verificar Cita</a\n            >\n            <a\n              class=\"dropdown-item actions-menu-item\"\n              style=\"cursor: pointer\"\n              @click=\"streamTicket\"\n              >Imprimir Ticket</a\n            >\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport cycleService from \"@/services/cycleService\";\nimport weightService from \"@/services/weightService\";\nimport {\n  linearAlert,\n  linearToast,\n  linearConfirmationAlert,\n} from \"@/utils/swalAlerts\";\nimport {\n  getFormattedDate,\n  getFormattedTime,\n  splitDate,\n} from \"@/utils/timeUtils\";\nimport { generateTicket } from \"@/utils/pdfUtils\";\nexport default {\n  data: () => ({\n    isLoading: false,\n    lastCycle: 1,\n    VGM: \"\",\n    weightDirection: null,\n    actionsMenuActive: false,\n    //header\n    headerCycle: null,\n    headerCycleDate: null,\n    headerCompany: null,\n    headerLicenseNumber: null,\n    headerLicenseCountry: null,\n    headerPilot: null,\n    headerPlateCountry: null,\n    headerPlateNumber: null,\n    headerObservation: null,\n    headerTruckType: null,\n    headerEntryDate: null,\n    headerEntryHour: null,\n    //movements\n    movementRegistryNumber: 1,\n    movementEntryWeight: null,\n    movementExitWeight: null,\n    movementEntryDate: null,\n    movementEntryTime: null,\n    movementExitDate: null,\n    movementExitTime: null,\n    movementEntryBascName: null,\n    movementEntryBascNumber: null,\n    movementExitBascName: null,\n    movementExitBascNumber: null,\n    movementEntryBoleta: null,\n    movementExitBoleta: null,\n    movementEntryTicket: null,\n    movementExitTicket: null,\n    //container\n    containerNumber: null,\n    containerTaraWeight: null,\n    containerLoadNetWeight: null,\n    containerShip: null,\n    containerLoadType: null,\n    containerObservations: null,\n    //policy\n    policyDucaNumber: null,\n    policyBlNumber: null,\n    policyCosignee: null,\n    policyManifest: null,\n    policyNumber: null,\n    policyWeight: null,\n  }),\n  methods: {\n    checkObject(obj) {\n      // Check if obj is a non-null object with at least one property\n      return obj && typeof obj === \"object\" && Object.keys(obj).length > 0;\n    },\n    resetData() {\n      this.isLoading = false;\n      this.lastCycle = 1;\n      //header\n      this.headerCycle = null;\n      this.headerCycleDate = null;\n      this.headerCompany = null;\n      this.headerLicenseNumber = null;\n      this.headerLicenseCountry = null;\n      this.headerPilot = null;\n      this.headerPlateCountry = null;\n      this.headerPlateNumber = null;\n      this.headerObservation = null;\n      this.headerTruckType = null;\n      this.headerEntryDate = null;\n      this.headerEntryHour = null;\n      //movements\n      this.movementRegistryNumber = 1;\n      this.movementEntryWeight = null;\n      this.movementExitWeight = null;\n      this.movementEntryDate = null;\n      this.movementEntryTime = null;\n      this.movementExitDate = null;\n      this.movementExitTime = null;\n      this.movementEntryBascName = null;\n      this.movementEntryBascNumber = null;\n      this.movementExitBascName = null;\n      this.movementExitBascNumber = null;\n      this.movementEntryBoleta = null;\n      this.movementExitBoleta = null;\n      this.movementEntryTicket = null;\n      this.movementExitTicket = null;\n      //container\n      this.containerNumber = null;\n      this.containerTaraWeight = null;\n      this.containerLoadNetWeight = null;\n      this.containerShip = null;\n      this.containerLoadType = null;\n      this.containerObservations = null;\n      //policy\n      this.policyDucaNumber = null;\n      this.policyBlNumber = null;\n      this.policyCosignee = null;\n      this.policyManifest = null;\n      this.policyNumber = null;\n      this.policyWeight = null;\n    },\n    setHeaderData({\n      FECHA_CICLO,\n      PAIS_LICENCIA,\n      NUMERO_LICENCIA,\n      PAIS_PLACA,\n      NUMERO_PLACA,\n      OBSERVACION_CICLO,\n      FECHA_INGRESO,\n      TIPO_CAMION,\n      NOMBRE_PILOTO,\n      NOMBRE_TRANSPORTISTA,\n    }) {\n      const cycleDate = splitDate(FECHA_CICLO);\n      const entryDate = splitDate(FECHA_INGRESO);\n\n      this.headerCycleDate = cycleDate[\"DATE\"];\n      this.headerLicenseCountry = PAIS_LICENCIA;\n      this.headerLicenseNumber = NUMERO_LICENCIA;\n      this.headerCompany = NOMBRE_TRANSPORTISTA;\n      this.headerPilot = NOMBRE_PILOTO;\n      this.headerPlateCountry = PAIS_PLACA;\n      this.headerPlateNumber = NUMERO_PLACA;\n      this.headerObservation = OBSERVACION_CICLO;\n      this.headerEntryDate = entryDate[\"DATE\"];\n      this.headerEntryHour = entryDate[\"TIME\"];\n      this.headerTruckType = TIPO_CAMION;\n    },\n    setMovementData({\n      PESO_ENTRADA,\n      BASCULA_PESO_ENTRADA,\n      EMPRESA_PESO_ENTRADA,\n      FECHA_PESO_ENTRADA,\n      BOLETA_PESO_ENTRADA,\n      TICKET_FAC1,\n      PESO_SALIDA,\n      BASCULA_PESO_SALIDA,\n      EMPRESA_PESO_SALIDA,\n      FECHA_PESO_SALIDA,\n      BOLETA_PESO_SALIDA,\n      REGISTROS,\n      TICKET_FAC2,\n      VGM,\n    }) {\n      const entryDate = splitDate(FECHA_PESO_ENTRADA);\n      const exitDate = splitDate(FECHA_PESO_SALIDA);\n\n      this.movementEntryWeight = PESO_ENTRADA;\n      this.movementExitWeight = PESO_SALIDA;\n      this.movementEntryDate = entryDate[\"DATE\"];\n      this.movementEntryTime = entryDate[\"TIME\"];\n      this.movementExitDate = exitDate[\"DATE\"];\n      this.movementExitTime = exitDate[\"TIME\"];\n      this.movementEntryBascName = EMPRESA_PESO_ENTRADA;\n      this.movementEntryBascNumber = BASCULA_PESO_ENTRADA;\n      this.movementExitBascName = EMPRESA_PESO_SALIDA;\n      this.movementExitBascNumber = BASCULA_PESO_SALIDA;\n      this.movementEntryBoleta = BOLETA_PESO_ENTRADA;\n      this.movementExitBoleta = BOLETA_PESO_SALIDA;\n      this.movementEntryTicket = TICKET_FAC1;\n      this.movementExitTicket = TICKET_FAC2;\n\n      //ultimo cyclo\n      this.lastCycle = Number.parseInt(REGISTROS);\n\n      //VGM\n\n      this.VGM = VGM;\n    },\n    setContainerData({\n      NUMERO_CONTENEDOR,\n      PESO_TARA_CONTE,\n      OBSERVACION,\n      INDICADOR_TABLA,\n    }) {\n      this.containerNumber = NUMERO_CONTENEDOR;\n      this.containerTaraWeight = PESO_TARA_CONTE;\n      this.containerObservations = OBSERVACION;\n      this.containerLoadType = INDICADOR_TABLA;\n    },\n    setPolicyData({ POLIZA, NUMERO_MANIFIESTO, CONSIGNATARIO, PESO }) {\n      this.policyNumber = POLIZA;\n      this.policyManifest = NUMERO_MANIFIESTO;\n      this.policyCosignee = CONSIGNATARIO;\n      this.policyCosignee = CONSIGNATARIO;\n      this.policyWeight = PESO;\n    },\n    setBlNumber({ BL }) {\n      this.policyBlNumber = BL;\n    },\n    setNewWeightData(weight, correlative) {\n      const { weightDirection } = this;\n      const basculaNumber = localStorage.getItem(\"bascula\");\n      if (weightDirection === \"ENTRADA\") {\n        this.movementEntryBascName = \"NEPORSA\";\n        this.movementEntryBascNumber = basculaNumber;\n        this.movementEntryBoleta = correlative;\n        this.movementEntryDate = getFormattedDate();\n        this.movementEntryTime = getFormattedTime();\n        this.movementEntryWeight = weight;\n      } else if (weightDirection === \"SALIDA\") {\n        this.movementExitBascName = \"NEPORSA\";\n        this.movementExitBascNumber = basculaNumber;\n        this.movementExitBoleta = correlative;\n        this.movementExitDate = getFormattedDate();\n        this.movementExitTime = getFormattedTime();\n        this.movementExitWeight = weight;\n      } else {\n        return new Error(\"No se ha detectado direcci칩n de peso correcta\");\n      }\n    },\n    getNewWeightData() {\n      const { weightDirection } = this;\n      const machine = localStorage.getItem(\"maquina\");\n\n      if (weightDirection === \"ENTRADA\") {\n        return {\n          bascula: this.movementEntryBascName,\n          basculaNumber: this.movementEntryBascNumber,\n          boletaNumber: this.movementEntryBoleta,\n          date: this.movementEntryDate,\n          time: this.movementEntryTime,\n          weight: this.movementEntryWeight,\n          machine,\n          registryNumber: this.movementRegistryNumber,\n          weightType: weightDirection,\n          observation: this.containerObservations,\n          tara: this.containerTaraWeight,\n          ticket: this.movementEntryTicket,\n          container: this.containerNumber,\n        };\n      } else if (weightDirection === \"SALIDA\") {\n        return {\n          bascula: this.movementExitBascName,\n          basculaNumber: this.movementExitBascNumber,\n          boletaNumber: this.movementExitBoleta,\n          date: this.movementExitDate,\n          time: this.movementExitTime,\n          weight: this.movementExitWeight,\n          machine,\n          registryNumber: this.movementRegistryNumber,\n          weightType: weightDirection,\n          observation: this.containerObservations,\n          tara: this.containerTaraWeight,\n          ticket: this.movementExitTicket,\n          container: this.containerNumber,\n        };\n      } else {\n        return new Error(\"No se ha detectado direcci칩n de peso correcta\");\n      }\n    },\n    async getCycle() {\n      if (this.isCycleNumberSet) {\n        const { headerCycle } = this;\n        try {\n          const { data } = await cycleService.getCycle({ cycle: headerCycle });\n          const { TIPO_RESPUESTA } = data;\n          if (TIPO_RESPUESTA[\"RESULTADO\"] === \"01\") {\n            const { PARAMETROS_SALIDA } = data;\n            return PARAMETROS_SALIDA;\n          } else\n            await linearAlert(\n              \"Advertencia\",\n              TIPO_RESPUESTA[\"DESCRIPCION\"],\n              \"warning\"\n            );\n          return null;\n        } catch (error) {\n          await linearAlert(\"Error\", error, \"error\", 3000, false);\n          console.error(error);\n          return null;\n        }\n      }\n    },\n    async getWeightData() {\n      if (this.isCycleNumberAndRegistryNumberSet) {\n        const { headerCycle, movementRegistryNumber } = this;\n        try {\n          const { data } = await cycleService.getWeightData({\n            cycle: headerCycle,\n            registryNumber: movementRegistryNumber,\n          });\n          const { TIPO_RESPUESTA } = data;\n          if (TIPO_RESPUESTA[\"RESULTADO\"] === \"01\") {\n            const { PARAMETROS_SALIDA } = data;\n            return PARAMETROS_SALIDA;\n          } else\n            await linearAlert(\n              \"Advertencia\",\n              TIPO_RESPUESTA[\"DESCRIPCION\"],\n              \"warning\"\n            );\n          return null;\n        } catch (error) {\n          await linearAlert(\"Error\", error, \"error\", 3000, false);\n          console.error(error);\n          return null;\n        }\n      }\n    },\n    async getPolicyData() {\n      if (this.isCycleNumberAndBlNumberSet) {\n        const { headerCycle, policyBlNumber } = this;\n        try {\n          const { data } = await cycleService.getPolicy({\n            cycle: headerCycle,\n            bl: policyBlNumber,\n          });\n          const { TIPO_RESPUESTA } = data;\n          if (TIPO_RESPUESTA[\"RESULTADO\"] === \"01\") {\n            const { PARAMETROS_SALIDA } = data;\n            return PARAMETROS_SALIDA;\n          } else\n            await linearAlert(\n              \"Advertencia\",\n              TIPO_RESPUESTA[\"DESCRIPCION\"],\n              \"warning\"\n            );\n          return null;\n        } catch (error) {\n          await linearAlert(\"Error\", error, \"error\", 3000, false);\n          console.error(error);\n          return null;\n        }\n      }\n    },\n    async getDucaData() {\n      if (this.isDucaSet) {\n        const { policyDucaNumber } = this;\n        try {\n          const { data } = await cycleService.getBL({ duca: policyDucaNumber });\n          const { TIPO_RESPUESTA } = data;\n          if (TIPO_RESPUESTA[\"RESULTADO\"] === \"01\") {\n            const { PARAMETROS_SALIDA } = data;\n            return PARAMETROS_SALIDA;\n          } else\n            await linearAlert(\n              \"Advertencia\",\n              TIPO_RESPUESTA[\"DESCRIPCION\"],\n              \"warning\"\n            );\n          return null;\n        } catch (error) {\n          await linearAlert(\"Error\", error, \"error\", 3000, false);\n          console.error(error);\n          return null;\n        }\n      }\n    },\n    async getHeaderAndWeightData(noSkipHeader = true, getLastCycle = true) {\n      this.isLoading = true;\n      //funciones de datos\n      const { getCycle, getWeightData } = this;\n      //funciones de seteo de datos\n      const { setHeaderData, setContainerData, setMovementData } = this;\n      //validaciones\n      const { checkRegistryNumber, checkObject } = this;\n      try {\n        if (noSkipHeader) {\n          await linearToast(\n            `Atenci칩n, recopilando informaci칩n de ciclo`,\n            \"warning\"\n          );\n\n          const headerData = await getCycle();\n          if (!checkObject(headerData)) {\n            await linearAlert(\n              `Advertencia`,\n              `Numero de ciclo ${this.headerCycle}, no valido, abortando`,\n              \"warning\"\n            );\n            this.resetData();\n            return;\n          }\n          setHeaderData(headerData);\n        } else {\n          await linearToast(\n            `Atenci칩n, saltando recopilaci칩n de datos de encabezado de ciclo ${this.headerCycle}`,\n            \"warning\"\n          );\n        }\n        let weightData = await getWeightData();\n        if (!checkObject(weightData)) {\n          await linearAlert(\n            `Advertencia`,\n            `No se encontro informaci칩n de pesajes, movimientos o contenedor con ciclo ${this.headerCycle}, abortando`,\n            \"warning\"\n          );\n          this.resetData();\n          return;\n        }\n\n        setContainerData(weightData);\n        setMovementData(weightData);\n        if (getLastCycle && checkRegistryNumber()) {\n          await linearToast(\n            `Atenci칩n, numero de registro ${this.movementRegistryNumber}, ya contiene pesajes de salida y entrada, pasando al ultimo registro disponible, registro ${this.lastCycle}`,\n            \"warning\"\n          );\n          this.movementRegistryNumber = this.lastCycle;\n          weightData = await getWeightData();\n          setContainerData(weightData);\n          setMovementData(weightData);\n        }\n        await linearToast(`Recopilaci칩n de datos de ciclo exitoso!`, \"success\");\n        await linearToast(`Recopilando informaci칩n de peso`, \"warning\");\n        await this.checkWeight();\n      } catch (error) {\n        await linearAlert(\"Error\", error, \"error\", 3000, false);\n        console.error(error);\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    async getDucaAndPolicyData() {\n      this.isLoading = true;\n      //funciones de datos\n      const { getDucaData, getPolicyData } = this;\n      //funciones de seteo de datos\n      const { setBlNumber, setPolicyData } = this;\n      //validaciones\n      const { checkObject } = this;\n      try {\n        await linearToast(`Atenci칩n, recopilando numero de BL`, \"warning\");\n\n        const blData = await getDucaData();\n        if (!checkObject(blData)) {\n          await linearAlert(\n            `Advertencia`,\n            `Numero de duca ${this.policyDucaNumber}, no valido, abortando`,\n            \"warning\"\n          );\n          return;\n        }\n        setBlNumber(blData);\n        await linearToast(\n          `Atenci칩n, recopilando datos de poliza con numero de BL ${this.policyBlNumber}`,\n          \"warning\"\n        );\n        let policyData = await getPolicyData();\n        if (!checkObject(policyData)) {\n          await linearAlert(\n            `Advertencia`,\n            `No se encontro informaci칩n de poliza, abortando`,\n            \"warning\"\n          );\n          this.setBlNumber({ BL: null });\n          return;\n        }\n        setPolicyData(policyData);\n        await linearToast(\n          `Recopilaci칩n de datos de poliza exitoso!`,\n          \"success\"\n        );\n      } catch (error) {\n        await linearAlert(\"Error\", error, \"error\", 3000, false);\n        console.error(error);\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    async policyDataHandler() {\n      this.isLoading = true;\n      //funciones de datos\n      const { getPolicyData } = this;\n      //funciones de seteo de datos\n      const { setPolicyData } = this;\n      //validaciones\n      //datos\n      try {\n        await linearToast(\n          `Atenci칩n, recopilando informaci칩n de poliza`,\n          \"warning\"\n        );\n        const policyData = await getPolicyData();\n        setPolicyData(policyData);\n        await linearToast(`Recopilaci칩n de datos de ciclo exitoso!`, \"success\");\n      } catch (error) {\n        await linearAlert(\"Error\", error, \"error\", 3000, false);\n        console.error(error);\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    async getAppointment() {\n      if (this.isContainerNumberSet) {\n        const { containerNumber } = this;\n        try {\n          const { data } = await cycleService.getAppointment({\n            containerNumber: containerNumber,\n          });\n          const { TIPO_RESPUESTA } = data;\n          if (TIPO_RESPUESTA[\"RESULTADO\"] === \"01\") {\n            const { PARAMETROS_SALIDA } = data;\n            return PARAMETROS_SALIDA;\n          } else\n            await linearAlert(\n              \"Advertencia\",\n              TIPO_RESPUESTA[\"DESCRIPCION\"],\n              \"warning\"\n            );\n          return null;\n        } catch (error) {\n          await linearAlert(\"Error\", error, \"error\", 3000, false);\n          console.error(error);\n          return null;\n        }\n      } else {\n        await linearAlert(\n          \"Advertencia\",\n          \"La cita no se pudo verificar por falta de numero de contenedor, por favor ingreselo\",\n          \"warning\"\n        );\n      }\n    },\n    async checkAppointment() {\n      this.isLoading = true;\n      //funciones de datos\n      const { getAppointment } = this;\n      //validaciones\n      const { checkObject } = this;\n\n      try {\n        await linearToast(\n          `Atenci칩n, confirmando cita de contenedor`,\n          \"warning\"\n        );\n        const appointmentData = await getAppointment();\n        if (\n          !checkObject(appointmentData) ||\n          (!appointmentData[\"CITA\"] && !appointmentData[\"PESOS\"])\n        ) {\n          if (this.isContainerNumberSet) {\n            await linearToast(\n              `Cita de contenedor no encontrada ${this.containerNumber}, proceda`,\n              \"success\"\n            );\n          }\n          return;\n        } else {\n          await linearAlert(\n            `Advertencia`,\n            `Cita de contenedor encontrada ${this.containerNumber}, informaci칩n de cita ${appointmentData[\"CITA\"]}, pesos ${appointmentData[\"PESOS\"]}`,\n            \"warning\"\n          );\n        }\n      } catch (error) {\n        await linearAlert(\"Error\", error, \"error\", 3000, false);\n        console.error(error);\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    async getCorrelative() {\n      const basculaNumber = localStorage.getItem(\"bascula\");\n      try {\n        const { data } = await cycleService.getCorrelative({\n          basculaNumber,\n          companyNumber: 25,\n        });\n        const { TIPO_RESPUESTA } = data;\n        if (TIPO_RESPUESTA[\"RESULTADO\"] === \"01\") {\n          const { PARAMETROS_SALIDA } = data;\n          return PARAMETROS_SALIDA;\n        } else\n          await linearAlert(\n            \"Advertencia\",\n            TIPO_RESPUESTA[\"DESCRIPCION\"],\n            \"warning\"\n          );\n        return null;\n      } catch (error) {\n        await linearAlert(\"Error\", error, \"error\", 3000, false);\n        console.error(error);\n        return null;\n      }\n    },\n    checkRegistryNumber() {\n      return this.lastCycle !== 1;\n    },\n    goBackARegistryNumber() {\n      this.movementRegistryNumber = this.movementRegistryNumber - 1;\n      this.getHeaderAndWeightData(false, false);\n    },\n    gotoFirstRegistryNumber() {\n      this.movementRegistryNumber = 1;\n      this.getHeaderAndWeightData(false, false);\n    },\n    goUpARegistryNumber() {\n      this.movementRegistryNumber = this.movementRegistryNumber + 1;\n\n      this.getHeaderAndWeightData(false, false);\n    },\n    async checkWeight() {\n      this.isLoading = true;\n      try {\n        const basculaNumber = localStorage.getItem(\"bascula\");\n        const username = localStorage.getItem(\"username\");\n\n        const { data } = await weightService.weight({ basculaNumber });\n        // eslint-disable-next-line\n        const [peso, maquina] = data.split(\"-\");\n        localStorage.setItem(\"maquina\", maquina);\n        if (peso) {\n          const formattedPeso_Carga = (Number.parseFloat(peso) / 1000).toFixed(\n            3\n          );\n          const { isConfirmed } = await linearConfirmationAlert(\n            `Peso ${formattedPeso_Carga}`,\n            `Confirmar Peso`,\n            \"warning\",\n            \"Confirmar\",\n            \"Volver A Pesar\"\n          );\n\n          if (isConfirmed) {\n            const { CORRELATIVO: correlative } = await this.getCorrelative();\n            await linearToast(\n              `Atenci칩n, recopilando informaci칩n de nuevo registro de peso`,\n              \"warning\"\n            );\n            this.setWeightDirection();\n            this.setNewWeightData(formattedPeso_Carga, correlative);\n            const isNewDataCorrect =\n              await this.confirmNewCycleWeightRegistryData();\n            if (isNewDataCorrect) {\n              await cycleService.createLocalCycleRegistry({\n                machine: maquina,\n                username,\n                ...this.$data,\n              });\n              await linearToast(\n                `Registro de peso en local exitoso!`,\n                \"success\"\n              );\n            } else this.cleanNewWeightData();\n          } else this.checkWeight();\n        } else {\n          await linearAlert(\n            \"ERROR AL LEER PESO\",\n            \"Error al Leer Peso, Intente de Nuevamente\",\n            \"error\"\n          );\n        }\n      } catch (error) {\n        this.isLoading = false;\n        console.error(\"Error in checkWeight:\", error);\n        await linearAlert(\"ERROR\", \"An unexpected error occurred\", \"error\");\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    async createCycleRegistry() {\n      this.isLoading = true;\n\n      try {\n        await linearToast(\n          `Atenci칩n, ingresando ciclo en base de datos local`,\n          \"warning\"\n        );\n        const username = localStorage.getItem(\"username\");\n        const machine = localStorage.getItem(\"maquina\");\n        const { data } = await cycleService.createLocalCycleRegistry({\n          machine,\n          username,\n          ...this.$data,\n        });\n        console.log(\"local registry response data\", data);\n      } catch (error) {\n        await linearAlert(\"Error\", error, \"error\", 3000, false);\n        console.error(error);\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    async confirmNewCycleWeightRegistryData() {\n      const weightData = this.getNewWeightData();\n      const dataHtml = `\n              <p><strong>Bascula:</strong> ${weightData.bascula || \"\"}</p>\n              <p><strong>N칰mero de Bascula:</strong> ${\n                weightData.basculaNumber || \"\"\n              }</p>\n              <p><strong>N칰mero de Boleta:</strong> ${\n                weightData.boletaNumber || \"\"\n              }</p>\n              <p><strong>Fecha:</strong> ${weightData.date || \"\"}</p>\n              <p><strong>Hora:</strong> ${weightData.time || \"\"}</p>\n              <p><strong>Peso:</strong> ${weightData.weight || \"\"}</p>\n              <p><strong>Computadora:</strong> ${weightData.machine || \"\"}</p>\n              <p><strong>Numero de Registro:</strong> ${\n                weightData.registryNumber || \"\"\n              }</p>\n              <p><strong>Tipo de Pesaje:</strong> ${\n                weightData.weightType || \"\"\n              }</p> \n              <p><strong>Observaci칩n:</strong> ${\n                weightData.observation || \"\"\n              }</p>\n              <p><strong>Tara:</strong> ${weightData.tara || \"\"}</p>\n              <p><strong>Ticket:</strong> ${weightData.ticket || \"\"}</p>\n              <p><strong>Contenedor:</strong> ${weightData.container || \"\"}</p>\n            `;\n\n      const { isConfirmed } = await linearConfirmationAlert(\n        `Confirmar los siguientes datos a guardar`,\n        null,\n        \"warning\",\n        \"Guardar\",\n        \"Cancelar\",\n        dataHtml\n      );\n      return isConfirmed;\n    },\n    cleanNewWeightData() {\n      const { weightDirection } = this;\n      if (weightDirection === \"ENTRADA\") {\n        this.movementEntryBascName = null;\n        this.movementEntryBascNumber = null;\n        this.movementEntryBoleta = null;\n        this.movementEntryDate = null;\n        this.movementEntryTime = null;\n        this.movementEntryWeight = null;\n      } else if (weightDirection === \"SALIDA\") {\n        this.movementExitBascName = null;\n        this.movementExitBascNumber = null;\n        this.movementExitBoleta = null;\n        this.movementExitDate = null;\n        this.movementExitTime = null;\n        this.movementExitWeight = null;\n      } else {\n        return new Error(\"No se ha detectado direcci칩n de peso correcta\");\n      }\n    },\n    setWeightDirection() {\n      const { movementEntryWeight, movementExitWeight } = this;\n      this.weightDirection =\n        movementEntryWeight === \"0\"\n          ? \"ENTRADA\"\n          : movementExitWeight === \"0\"\n          ? \"SALIDA\"\n          : \"NINGUNO\";\n    },\n    async streamTicket() {\n      const { weightDirection } = this;\n      if (weightDirection !== \"NINGUNO\") {\n        try {\n          await linearToast(\n            `Atenci칩n, generando ticket ${weightDirection}`,\n            \"warning\"\n          );\n          const ticketData = generateTicket(this.$data);\n          console.log(\"ticket data :\", ticketData);\n        } catch (error) {\n          await linearAlert(\"Error\", error, \"error\", 3000, false);\n          console.error(error);\n          return null;\n        }\n      } else {\n        await linearToast(`Por favor ingrese un peso primero`, \"error\");\n      }\n    },\n  },\n  computed: {\n    isCycleNumberSet() {\n      return !!this.headerCycle;\n    },\n    isCycleNumberAndBlNumberSet() {\n      return this.headerCycle && this.policyBlNumber;\n    },\n    isCycleNumberAndRegistryNumberSet() {\n      return this.headerCycle && this.movementRegistryNumber;\n    },\n    isContainerNumberSet() {\n      return !!this.containerNumber;\n    },\n    isDucaSet() {\n      return this.policyDucaNumber;\n    },\n    isGoBackARegistryNumberPossible() {\n      return !this.isLoading || this.movementRegistryNumber > 1;\n    },\n    calculatedContainerNetWeight() {\n      if (\n        this.movementExitWeight &&\n        this.movementEntryWeight &&\n        this.containerTaraWeight\n      ) {\n        return (\n          Number.parseFloat(this.movementExitWeight) -\n          (Number.parseFloat(this.movementEntryWeight) +\n            Number.parseFloat(this.containerTaraWeight))\n        ).toFixed(2);\n      } else {\n        return null;\n      }\n    },\n    allInputData() {\n      const {\n        headerCycle,\n        headerCycleDate,\n        headerCompany,\n        headerLicenseNumber,\n        headerLicenseCountry,\n        headerPilot,\n        headerPlateCountry,\n        headerPlateNumber,\n        headerObservation,\n        headerTruckType,\n        headerEntryDate,\n        headerEntryHour,\n        //movements\n        movementRegistryNumber,\n        movementEntryWeight,\n        movementExitWeight,\n        movementEntryDate,\n        movementEntryTime,\n        movementExitDate,\n        movementExitTime,\n        movementEntryBascName,\n        movementEntryBascNumber,\n        movementExitBascName,\n        movementExitBascNumber,\n        movementEntryBoleta,\n        movementExitBoleta,\n        movementEntryTicket,\n        movementExitTicket,\n        //container\n        containerNumber,\n        containerTaraWeight,\n        containerLoadNetWeight,\n        containerShip,\n        containerLoadType,\n        containerObservations,\n        //policy\n        policyDucaNumber,\n        policyBlNumber,\n        policyCosignee,\n        policyManifest,\n        policyNumber,\n        policyWeight,\n      } = this;\n\n      return {\n        headerCycle,\n        headerCycleDate,\n        headerCompany,\n        headerLicenseNumber,\n        headerLicenseCountry,\n        headerPilot,\n        headerPlateCountry,\n        headerPlateNumber,\n        headerObservation,\n        headerTruckType,\n        headerEntryDate,\n        headerEntryHour,\n        //movements\n        movementRegistryNumber,\n        movementEntryWeight,\n        movementExitWeight,\n        movementEntryDate,\n        movementEntryTime,\n        movementExitDate,\n        movementExitTime,\n        movementEntryBascName,\n        movementEntryBascNumber,\n        movementExitBascName,\n        movementExitBascNumber,\n        movementEntryBoleta,\n        movementExitBoleta,\n        movementEntryTicket,\n        movementExitTicket,\n        //container\n        containerNumber,\n        containerTaraWeight,\n        containerLoadNetWeight,\n        containerShip,\n        containerLoadType,\n        containerObservations,\n        //policy\n        policyDucaNumber,\n        policyBlNumber,\n        policyCosignee,\n        policyManifest,\n        policyNumber,\n        policyWeight,\n      };\n    },\n  },\n};\n</script>\n\n<style scoped>\n.writeable {\n  font-weight: bold;\n}\ninput:not(.writeable) {\n  background-color: rgb(180, 180, 180);\n  color: rgb(0, 0, 0);\n  border: rgb(251, 253, 255);\n  font-weight: bold;\n}\n.actions-menu {\n  width: 100%;\n  bottom: 100%;\n  font-size: 1.5rem;\n}\n\n.actions-menu-item {\n  cursor: pointer;\n  -webkit-user-select: none; /* Safari */\n  -moz-user-select: none; /* Firefox */\n  -ms-user-select: none; /* Internet Explorer/Edge */\n  user-select: none; /* Standard */\n}\n.swal2-title {\n  font-size: 24px !important; /* Change the size as needed */\n}\n</style>"],"names":[],"sourceRoot":""}