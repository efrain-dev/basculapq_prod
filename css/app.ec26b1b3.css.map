{"version":3,"file":"css/app.ec26b1b3.css","mappings":"AA6FA,iBACA,oBACA,qCACA,sBACA,WACA,gBACA,aACA,gBACA,gBACA,WACA,CCrDA,oBACA,UACA,CAGA,0BACA,kBACA,CAGA,0BACA,eACA,CAGA,gCACA,eACA,CACA,KACA,sBACA,yDACA,4BACA,sBACA,wBACA,SACA,UACA,aACA,mBACA,sBACA,CACA,KACA,8CACA,eACA,WACA,YACA,WAGA,aACA,uBACA,sBAEA,CACA,cAPA,eACA,gBAIA,aAOA,CALA,SAIA,WACA,CCmwCA,4BACA,eACA,CACA,uCACA,yBACA,WACA,eACA,eACA,CAEA,8BACA,wBACA","sources":["webpack://basculaspq/./src/views/LoginView.vue","webpack://basculaspq/./src/App.vue","webpack://basculaspq/./src/views/WeightingView.vue"],"sourcesContent":["<template>\r\n  <div class=\"login-container shadow\">\r\n    <div class=\"m-auto p-3\">\r\n      <img src=\"/icono-neporsa.jpg\" alt=\"Icono de Neporsa\" />\r\n    </div>\r\n    <div class=\"mb-3\">\r\n      <label class=\"form-label\">Usuario</label>\r\n      <input type=\"text\" class=\"form-control\" v-model=\"username\" />\r\n    </div>\r\n    <div class=\"mb-3\">\r\n      <label class=\"form-label\">Contrase침a</label>\r\n      <input\r\n        type=\"password\"\r\n        class=\"form-control\"\r\n        v-model=\"password\"\r\n        @keyup.enter=\"login\"\r\n      />\r\n    </div>\r\n    <div class=\"mb-3\">\r\n      <label class=\"form-label\">Bascula</label>\r\n      <select\r\n        type=\"text\"\r\n        class=\"form-control\"\r\n        v-model=\"bascula\"\r\n        @keyup.enter=\"login\"\r\n        @change=\"login\"\r\n      >\r\n        <option value=\"0\" selected>Seleccionar Opci칩n</option>\r\n        <option value=\"1\">Bascula 1</option>\r\n        <option value=\"2\">Bascula 2</option>\r\n        <option value=\"3\">Bascula 3</option>\r\n        <option value=\"4\">Bascula 4</option>\r\n        <option value=\"5\">Bascula 5</option>\r\n        <option value=\"6\">Bascula 6</option>\r\n        <option value=\"7\">Bascula 7</option>\r\n      </select>\r\n    </div>\r\n    <div class=\"text-center\">\r\n      <button type=\"button\" class=\"btn btn-success btn-lg\" @click=\"login\">\r\n        Acceder\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport authService from \"@/services/authService\";\r\nimport { linearAlert } from \"@/utils/swalAlerts\";\r\nexport default {\r\n  data: () => ({\r\n    username: \"\",\r\n    password: \"\",\r\n    bascula: 0,\r\n  }),\r\n\r\n  methods: {\r\n    async test() {\r\n      await linearAlert(\"Exito\", \"Ingresado con exito\", \"success\");\r\n    },\r\n    async login() {\r\n      try {\r\n        if (this.isFormFilled) {\r\n          const { username, password, bascula } = this;\r\n          await authService.login({ username, password });\r\n          localStorage.setItem(\"username\", username);\r\n          localStorage.setItem(\"password\", password);\r\n          localStorage.setItem(\"bascula\", bascula);\r\n          await linearAlert(\"Exito\", \"Ingresado con exito\", \"success\");\r\n          this.$emit(\"logged\");\r\n        } else {\r\n          await linearAlert(\r\n            \"Advertencia\",\r\n            \"Por favor llenar el formulario\",\r\n            \"warning\",\r\n            3000,\r\n            false\r\n          );\r\n        }\r\n      } catch (error) {\r\n        await linearAlert(\"Error\", error, \"error\", 3000, false);\r\n        console.error(error);\r\n      }\r\n    },\r\n  },\r\n  computed: {\r\n    isFormFilled() {\r\n      return this.username && this.password && this.bascula !== 0;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.login-container {\r\n  border-radius: 0.5rem;\r\n  box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;\r\n  background-color: white;\r\n  color: black;\r\n  font-weight: bold;\r\n  padding: 2rem;\r\n  max-width: 50rem;\r\n  min-width: 20rem;\r\n  margin: auto;\r\n}\r\n</style>","<template>\n  <div id=\"app\">\n    <div class=\"content\" v-if=\"!isLoggedIn\">\n      <LoginView @logged=\"navigate\" />\n    </div>\n    <NavBar @logout=\"logout\" v-else>\n      <div class=\"content\">\n        <router-view></router-view>\n      </div>\n    </NavBar>\n  </div>\n</template>\n\n<script>\nimport LoginView from \"./views/LoginView.vue\";\nimport NavBar from \"@/components/NavBar.vue\";\n\nimport { linearAlert } from \"./utils/swalAlerts\";\nexport default {\n  name: \"App\",\n  components: {\n    LoginView,\n    NavBar,\n  },\n  data: () => ({\n    isLoggedIn: false,\n  }),\n  methods: {\n    async logout() {\n      try {\n        console.log(\"init logout\");\n        localStorage.setItem(\"username\", undefined);\n        localStorage.setItem(\"password\", undefined);\n        await linearAlert(\"Exito\", \"Sesi칩n cerrada con exito\", \"success\");\n        this.$router.push(\"/\");\n        this.isLoggedIn = false;\n        console.log(\"end logout\");\n      } catch (error) {\n        await linearAlert(\"Error\", error, \"error\", 3000, false);\n        console.error(error);\n      }\n    },\n    navigate() {\n      this.isLoggedIn = true;\n    },\n  },\n};\n</script>\n\n<style>\n*::-webkit-scrollbar {\n  width: 10px;\n}\n\n/* Track */\n*::-webkit-scrollbar-track {\n  background: #f1f1f1;\n}\n\n/* Handle */\n*::-webkit-scrollbar-thumb {\n  background: #888;\n}\n\n/* Handle on hover */\n*::-webkit-scrollbar-thumb:hover {\n  background: #555;\n}\nbody {\n  width: 100vw !important;\n  background-image: url(\"~/public/puerto-quetzal.png\");\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center;\n  margin: 0;\n  padding: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  padding: 0rem 2rem;\n  color: white;\n  height: 100%;\n  width: 100%;\n  max-width: 100%;\n  max-height: 100%;\n  display: flex;\n  align-items: flex-start; /* Align items to the top */\n  justify-content: center;\n  overflow: auto;\n}\n.content {\n  max-width: 100%; /* Ensure content doesn't overflow horizontally */\n  max-height: 100%; /* Ensure content doesn't overflow vertically */\n  overflow: auto; /* Allow inner content to be scrollable if needed */\n  margin: auto;\n}\n</style>\n","<template>\r\n  <div class=\"bg-white p-3 m-3 rounded shadow\">\r\n    <!-- Weighting section -->\r\n    <section>\r\n      <h3 class=\"text-center text-black fw-bold\">Pesaje de Camiones</h3>\r\n      <div class=\"row mt-1\">\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">Ciclo</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control writeable\"\r\n                v-model=\"headerCycle\"\r\n                :disabled=\"isLoading\"\r\n                @change=\"getHeaderAndWeightData\"\r\n                tabindex=\"1\"\r\n              />\r\n            </div>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                v-model=\"headerCycleDate\"\r\n                readonly\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">Licencia</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                readonly\r\n                v-model=\"headerLicenseCountry\"\r\n              />\r\n            </div>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                readonly\r\n                v-model=\"headerLicenseNumber\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row mt-1\">\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">Transporte</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                v-model=\"headerCompany\"\r\n                readonly\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">Piloto</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                readonly\r\n                v-model=\"headerPilot\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row mt-1\">\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">Placa</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                readonly\r\n                v-model=\"headerPlateCountry\"\r\n              />\r\n            </div>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                readonly\r\n                v-model=\"headerPlateNumber\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">Observaci칩n</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                readonly\r\n                v-model=\"headerObservation\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row mt-1 border-bottom pb-2\">\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">Ingreso Puerto</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                readonly\r\n                v-model=\"headerEntryDate\"\r\n              />\r\n            </div>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                readonly\r\n                v-model=\"headerEntryHour\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">Tipo Cami칩n</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                readonly\r\n                v-model=\"headerTruckType\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    <!-- Movements section -->\r\n    <section>\r\n      <div class=\"row mt-1\">\r\n        <h4 class=\"text-center text-black fw-bold\">\r\n          Informaci칩n de Movimientos\r\n        </h4>\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">Num. Registro</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"number\"\r\n                class=\"form-control\"\r\n                v-model=\"movementRegistryNumber\"\r\n                @change=\"getWeightData\"\r\n                readonly\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row mt-1\">\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">Peso Entrada</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                readonly\r\n                v-model=\"movementEntryWeight\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">Tiempo Entrada</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                readonly\r\n                v-model=\"movementEntryDate\"\r\n              />\r\n            </div>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                readonly\r\n                v-model=\"movementEntryTime\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">Bascula Entrada</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                readonly\r\n                v-model=\"movementEntryBascName\"\r\n              />\r\n            </div>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                readonly\r\n                v-model=\"movementEntryBascNumber\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">Boleta Entrada</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                readonly\r\n                v-model=\"movementEntryBoleta\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">Ticket Entrada</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control writeable\"\r\n                v-model=\"movementEntryTicket\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row mt-1 border-bottom pb-2\">\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">Peso Salida</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                readonly\r\n                v-model=\"movementExitWeight\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">Tiempo Salida</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                readonly\r\n                v-model=\"movementExitDate\"\r\n              />\r\n            </div>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                readonly\r\n                v-model=\"movementExitTime\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">Bascula Salida</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                readonly\r\n                v-model=\"movementExitBascName\"\r\n              />\r\n            </div>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                readonly\r\n                v-model=\"movementExitBascNumber\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">Boleta Salida</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                readonly\r\n                v-model=\"movementExitBoleta\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">Ticket Salida</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control writeable\"\r\n                v-model=\"movementExitTicket\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    <!-- Container section -->\r\n    <section>\r\n      <div class=\"row mt-1\">\r\n        <h4 class=\"text-center text-black fw-bold\">\r\n          Informaci칩n de Contenedor\r\n        </h4>\r\n\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">Num. de Contenedor</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control writeable\"\r\n                v-model=\"containerNumber\"\r\n                tabindex=\"2\"\r\n                @keyup.enter=\"checkAppointment\"\r\n                @change=\"checkAppointment\"\r\n                :disabled=\"isLoading\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">Peso Tara</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control writeable\"\r\n                tabindex=\"3\"\r\n                v-model=\"containerTaraWeight\"\r\n                :disabled=\"isLoading\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row mt-1\">\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">Peso Neto Carga</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                readonly\r\n                v-model=\"calculatedContainerNetWeight\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">Buque</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                readonly\r\n                v-model=\"containerShip\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row mt-1 border-bottom pb-2\">\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">Tipo de Carga</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                readonly\r\n                v-model=\"containerLoadType\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">Observaciones</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control writeable\"\r\n                tabindex=\"4\"\r\n                v-model=\"containerObservations\"\r\n                :disabled=\"isLoading\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    <!-- DUCA section -->\r\n    <section>\r\n      <div class=\"row mt-1\">\r\n        <h4 class=\"text-center text-black fw-bold\">Informaci칩n de Poliza</h4>\r\n\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">DUCA</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control writeable\"\r\n                :disabled=\"isLoading\"\r\n                v-model=\"policyDucaNumber\"\r\n                @change=\"getDucaAndPolicyData\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">No. BL</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                v-model=\"policyBlNumber\"\r\n                readonly\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row mt-1\">\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">Consignatario</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                readonly\r\n                v-model=\"policyCosignee\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">Manifiesto</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                readonly\r\n                v-model=\"policyManifest\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row mt-1\">\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">Poliza</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                readonly\r\n                v-model=\"policyNumber\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col\">\r\n          <div class=\"row\">\r\n            <label class=\"mb-2 text-black fw-bold\">Peso</label>\r\n            <div class=\"col\">\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control\"\r\n                readonly\r\n                v-model=\"policyWeight\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    <div\r\n      class=\"row text-center mt-4 justify-content-center gap-3 overflow-auto p-2\"\r\n    >\r\n      <div class=\"btn-group\" role=\"group\">\r\n        <button\r\n          type=\"button\"\r\n          class=\"btn btn-lg btn-primary\"\r\n          @click=\"gotoFirstRegistryNumber\"\r\n          :disabled=\"!isGoBackARegistryNumberPossible\"\r\n        >\r\n          Primero\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          class=\"btn btn-lg btn-primary\"\r\n          @click=\"goBackARegistryNumber\"\r\n          :disabled=\"!isGoBackARegistryNumberPossible\"\r\n        >\r\n          Anterior\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          class=\"btn btn-lg btn-primary\"\r\n          @click=\"goUpARegistryNumber\"\r\n        >\r\n          Siguiente\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          class=\"btn btn-lg btn-primary\"\r\n          @click=\"getHeaderAndWeightData(false)\"\r\n        >\r\n          Ultimo\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"btn-group\" role=\"group\">\r\n        <button type=\"button\" class=\"btn btn-warning btn-lg\" @click=\"resetData\">\r\n          Limpiar\r\n        </button>\r\n        <button type=\"button\" class=\"btn btn-success btn-lg\">Guardar</button>\r\n        <button type=\"button\" class=\"btn btn-info btn-lg\" @click=\"checkWeight\">\r\n          Pesar\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          class=\"btn btn-info btn-lg\"\r\n          @click=\"checkAppointment\"\r\n        >\r\n          Verificar Cita\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport cycleService from \"@/services/cycleService\";\r\nimport weightService from \"@/services/weightService\";\r\nimport {\r\n  linearAlert,\r\n  linearToast,\r\n  linearConfirmationAlert,\r\n} from \"@/utils/swalAlerts\";\r\nimport {\r\n  getFormattedDate,\r\n  getFormattedTime,\r\n  splitDate,\r\n} from \"@/utils/timeUtils\";\r\nexport default {\r\n  data: () => ({\r\n    isLoading: false,\r\n    lastCycle: 1,\r\n    VGM: \"\",\r\n    //header\r\n    headerCycle: null,\r\n    headerCycleDate: null,\r\n    headerCompany: null,\r\n    headerLicenseNumber: null,\r\n    headerLicenseCountry: null,\r\n    headerPilot: null,\r\n    headerPlateCountry: null,\r\n    headerPlateNumber: null,\r\n    headerObservation: null,\r\n    headerTruckType: null,\r\n    headerEntryDate: null,\r\n    headerEntryHour: null,\r\n    //movements\r\n    movementRegistryNumber: 1,\r\n    movementEntryWeight: null,\r\n    movementExitWeight: null,\r\n    movementEntryDate: null,\r\n    movementEntryTime: null,\r\n    movementExitDate: null,\r\n    movementExitTime: null,\r\n    movementEntryBascName: null,\r\n    movementEntryBascNumber: null,\r\n    movementExitBascName: null,\r\n    movementExitBascNumber: null,\r\n    movementEntryBoleta: null,\r\n    movementExitBoleta: null,\r\n    movementEntryTicket: null,\r\n    movementExitTicket: null,\r\n    //container\r\n    containerNumber: null,\r\n    containerTaraWeight: null,\r\n    containerLoadNetWeight: null,\r\n    containerShip: null,\r\n    containerLoadType: null,\r\n    containerObservations: null,\r\n    //policy\r\n    policyDucaNumber: null,\r\n    policyBlNumber: null,\r\n    policyCosignee: null,\r\n    policyManifest: null,\r\n    policyNumber: null,\r\n    policyWeight: null,\r\n  }),\r\n  methods: {\r\n    checkObject(obj) {\r\n      // Check if obj is a non-null object with at least one property\r\n      return obj && typeof obj === \"object\" && Object.keys(obj).length > 0;\r\n    },\r\n    resetData() {\r\n      this.isLoading = false;\r\n      this.lastCycle = 1;\r\n      //header\r\n      this.headerCycle = null;\r\n      this.headerCycleDate = null;\r\n      this.headerCompany = null;\r\n      this.headerLicenseNumber = null;\r\n      this.headerLicenseCountry = null;\r\n      this.headerPilot = null;\r\n      this.headerPlateCountry = null;\r\n      this.headerPlateNumber = null;\r\n      this.headerObservation = null;\r\n      this.headerTruckType = null;\r\n      this.headerEntryDate = null;\r\n      this.headerEntryHour = null;\r\n      //movements\r\n      this.movementRegistryNumber = 1;\r\n      this.movementEntryWeight = null;\r\n      this.movementExitWeight = null;\r\n      this.movementEntryDate = null;\r\n      this.movementEntryTime = null;\r\n      this.movementExitDate = null;\r\n      this.movementExitTime = null;\r\n      this.movementEntryBascName = null;\r\n      this.movementEntryBascNumber = null;\r\n      this.movementExitBascName = null;\r\n      this.movementExitBascNumber = null;\r\n      this.movementEntryBoleta = null;\r\n      this.movementExitBoleta = null;\r\n      this.movementEntryTicket = null;\r\n      this.movementExitTicket = null;\r\n      //container\r\n      this.containerNumber = null;\r\n      this.containerTaraWeight = null;\r\n      this.containerLoadNetWeight = null;\r\n      this.containerShip = null;\r\n      this.containerLoadType = null;\r\n      this.containerObservations = null;\r\n      //policy\r\n      this.policyDucaNumber = null;\r\n      this.policyBlNumber = null;\r\n      this.policyCosignee = null;\r\n      this.policyManifest = null;\r\n      this.policyNumber = null;\r\n      this.policyWeight = null;\r\n    },\r\n    setHeaderData({\r\n      FECHA_CICLO,\r\n      PAIS_LICENCIA,\r\n      NUMERO_LICENCIA,\r\n      PAIS_PLACA,\r\n      NUMERO_PLACA,\r\n      OBSERVACION_CICLO,\r\n      FECHA_INGRESO,\r\n      TIPO_CAMION,\r\n      NOMBRE_PILOTO,\r\n      NOMBRE_TRANSPORTISTA,\r\n    }) {\r\n      const cycleDate = splitDate(FECHA_CICLO);\r\n      const entryDate = splitDate(FECHA_INGRESO);\r\n\r\n      this.headerCycleDate = cycleDate[\"DATE\"];\r\n      this.headerLicenseCountry = PAIS_LICENCIA;\r\n      this.headerLicenseNumber = NUMERO_LICENCIA;\r\n      this.headerCompany = NOMBRE_TRANSPORTISTA;\r\n      this.headerPilot = NOMBRE_PILOTO;\r\n      this.headerPlateCountry = PAIS_PLACA;\r\n      this.headerPlateNumber = NUMERO_PLACA;\r\n      this.headerObservation = OBSERVACION_CICLO;\r\n      this.headerEntryDate = entryDate[\"DATE\"];\r\n      this.headerEntryHour = entryDate[\"TIME\"];\r\n      this.headerTruckType = TIPO_CAMION;\r\n    },\r\n    setMovementData({\r\n      PESO_ENTRADA,\r\n      BASCULA_PESO_ENTRADA,\r\n      EMPRESA_PESO_ENTRADA,\r\n      FECHA_PESO_ENTRADA,\r\n      BOLETA_PESO_ENTRADA,\r\n      TICKET_FAC1,\r\n      PESO_SALIDA,\r\n      BASCULA_PESO_SALIDA,\r\n      EMPRESA_PESO_SALIDA,\r\n      FECHA_PESO_SALIDA,\r\n      BOLETA_PESO_SALIDA,\r\n      REGISTROS,\r\n      TICKET_FAC2,\r\n      VGM,\r\n    }) {\r\n      const entryDate = splitDate(FECHA_PESO_ENTRADA);\r\n      const exitDate = splitDate(FECHA_PESO_SALIDA);\r\n\r\n      this.movementEntryWeight = PESO_ENTRADA;\r\n      this.movementExitWeight = PESO_SALIDA;\r\n      this.movementEntryDate = entryDate[\"DATE\"];\r\n      this.movementEntryTime = entryDate[\"TIME\"];\r\n      this.movementExitDate = exitDate[\"DATE\"];\r\n      this.movementExitTime = exitDate[\"TIME\"];\r\n      this.movementEntryBascName = EMPRESA_PESO_ENTRADA;\r\n      this.movementEntryBascNumber = BASCULA_PESO_ENTRADA;\r\n      this.movementExitBascName = EMPRESA_PESO_SALIDA;\r\n      this.movementExitBascNumber = BASCULA_PESO_SALIDA;\r\n      this.movementEntryBoleta = BOLETA_PESO_ENTRADA;\r\n      this.movementExitBoleta = BOLETA_PESO_SALIDA;\r\n      this.movementEntryTicket = TICKET_FAC1;\r\n      this.movementExitTicket = TICKET_FAC2;\r\n\r\n      //ultimo cyclo\r\n      this.lastCycle = Number.parseInt(REGISTROS);\r\n\r\n      //VGM\r\n\r\n      this.VGM = VGM;\r\n    },\r\n    setContainerData({\r\n      NUMERO_CONTENEDOR,\r\n      PESO_TARA_CONTE,\r\n      OBSERVACION,\r\n      INDICADOR_TABLA,\r\n    }) {\r\n      this.containerNumber = NUMERO_CONTENEDOR;\r\n      this.containerTaraWeight = PESO_TARA_CONTE;\r\n      this.containerObservations = OBSERVACION;\r\n      this.containerLoadType = INDICADOR_TABLA;\r\n    },\r\n    setPolicyData({ POLIZA, NUMERO_MANIFIESTO, CONSIGNATARIO, PESO }) {\r\n      this.policyNumber = POLIZA;\r\n      this.policyManifest = NUMERO_MANIFIESTO;\r\n      this.policyCosignee = CONSIGNATARIO;\r\n      this.policyCosignee = CONSIGNATARIO;\r\n      this.policyWeight = PESO;\r\n    },\r\n    setBlNumber({ BL }) {\r\n      this.policyBlNumber = BL;\r\n    },\r\n    setNewWeightData(weight, correlative) {\r\n      const { weightDirection } = this;\r\n      const basculaNumber = localStorage.getItem(\"bascula\");\r\n      if (weightDirection === \"ENTRADA\") {\r\n        this.movementEntryBascName = \"NEPORSA\";\r\n        this.movementEntryBascNumber = basculaNumber;\r\n        this.movementEntryBoleta = correlative;\r\n        this.movementEntryDate = getFormattedDate();\r\n        this.movementEntryTime = getFormattedTime();\r\n        this.movementEntryWeight = weight;\r\n      } else if (weightDirection === \"SALIDA\") {\r\n        this.movementExitBascName = \"NEPORSA\";\r\n        this.movementExitBascNumber = basculaNumber;\r\n        this.movementExitBoleta = correlative;\r\n        this.movementExitDate = getFormattedDate();\r\n        this.movementExitTime = getFormattedTime();\r\n        this.movementExitWeight = weight;\r\n      } else {\r\n        return new Error(\"No se ha detectado direcci칩n de peso correcta\");\r\n      }\r\n    },\r\n    getNewWeightData() {\r\n      const { weightDirection } = this;\r\n      if (weightDirection === \"ENTRADA\") {\r\n        return {\r\n          bascula: this.movementEntryBascName,\r\n          basculaNumber: this.movementEntryBascNumber,\r\n          boletaNumber: this.movementEntryBoleta,\r\n          date: this.movementEntryDate,\r\n          time: this.movementEntryTime,\r\n          weight: this.movementEntryWeight,\r\n        };\r\n      } else if (weightDirection === \"SALIDA\") {\r\n        return {\r\n          bascula: this.movementExitBascName,\r\n          basculaNumber: this.movementExitBascNumber,\r\n          boletaNumber: this.movementExitBoleta,\r\n          date: this.movementExitDate,\r\n          time: this.movementExitTime,\r\n          weight: this.movementExitWeight,\r\n        };\r\n      } else {\r\n        return new Error(\"No se ha detectado direcci칩n de peso correcta\");\r\n      }\r\n    },\r\n    async getCycle() {\r\n      if (this.isCycleNumberSet) {\r\n        const { headerCycle } = this;\r\n        try {\r\n          const { data } = await cycleService.getCycle({ cycle: headerCycle });\r\n          const { TIPO_RESPUESTA } = data;\r\n          if (TIPO_RESPUESTA[\"RESULTADO\"] === \"01\") {\r\n            const { PARAMETROS_SALIDA } = data;\r\n            return PARAMETROS_SALIDA;\r\n          } else\r\n            await linearAlert(\r\n              \"Advertencia\",\r\n              TIPO_RESPUESTA[\"DESCRIPCION\"],\r\n              \"warning\"\r\n            );\r\n          return null;\r\n        } catch (error) {\r\n          await linearAlert(\"Error\", error, \"error\", 3000, false);\r\n          console.error(error);\r\n          return null;\r\n        }\r\n      }\r\n    },\r\n    async getWeightData() {\r\n      if (this.isCycleNumberAndRegistryNumberSet) {\r\n        const { headerCycle, movementRegistryNumber } = this;\r\n        try {\r\n          const { data } = await cycleService.getWeightData({\r\n            cycle: headerCycle,\r\n            registryNumber: movementRegistryNumber,\r\n          });\r\n          const { TIPO_RESPUESTA } = data;\r\n          if (TIPO_RESPUESTA[\"RESULTADO\"] === \"01\") {\r\n            const { PARAMETROS_SALIDA } = data;\r\n            return PARAMETROS_SALIDA;\r\n          } else\r\n            await linearAlert(\r\n              \"Advertencia\",\r\n              TIPO_RESPUESTA[\"DESCRIPCION\"],\r\n              \"warning\"\r\n            );\r\n          return null;\r\n        } catch (error) {\r\n          await linearAlert(\"Error\", error, \"error\", 3000, false);\r\n          console.error(error);\r\n          return null;\r\n        }\r\n      }\r\n    },\r\n    async getPolicyData() {\r\n      if (this.isCycleNumberAndBlNumberSet) {\r\n        const { headerCycle, policyBlNumber } = this;\r\n        try {\r\n          const { data } = await cycleService.getPolicy({\r\n            cycle: headerCycle,\r\n            bl: policyBlNumber,\r\n          });\r\n          const { TIPO_RESPUESTA } = data;\r\n          if (TIPO_RESPUESTA[\"RESULTADO\"] === \"01\") {\r\n            const { PARAMETROS_SALIDA } = data;\r\n            return PARAMETROS_SALIDA;\r\n          } else\r\n            await linearAlert(\r\n              \"Advertencia\",\r\n              TIPO_RESPUESTA[\"DESCRIPCION\"],\r\n              \"warning\"\r\n            );\r\n          return null;\r\n        } catch (error) {\r\n          await linearAlert(\"Error\", error, \"error\", 3000, false);\r\n          console.error(error);\r\n          return null;\r\n        }\r\n      }\r\n    },\r\n    async getDucaData() {\r\n      if (this.isDucaSet) {\r\n        const { policyDucaNumber } = this;\r\n        try {\r\n          const { data } = await cycleService.getBL({ duca: policyDucaNumber });\r\n          const { TIPO_RESPUESTA } = data;\r\n          if (TIPO_RESPUESTA[\"RESULTADO\"] === \"01\") {\r\n            const { PARAMETROS_SALIDA } = data;\r\n            return PARAMETROS_SALIDA;\r\n          } else\r\n            await linearAlert(\r\n              \"Advertencia\",\r\n              TIPO_RESPUESTA[\"DESCRIPCION\"],\r\n              \"warning\"\r\n            );\r\n          return null;\r\n        } catch (error) {\r\n          await linearAlert(\"Error\", error, \"error\", 3000, false);\r\n          console.error(error);\r\n          return null;\r\n        }\r\n      }\r\n    },\r\n    async getHeaderAndWeightData(noSkipHeader = true, getLastCycle = true) {\r\n      this.isLoading = true;\r\n      //funciones de datos\r\n      const { getCycle, getWeightData } = this;\r\n      //funciones de seteo de datos\r\n      const { setHeaderData, setContainerData, setMovementData } = this;\r\n      //validaciones\r\n      const { checkRegistryNumber, checkObject } = this;\r\n      try {\r\n        if (noSkipHeader) {\r\n          await linearToast(\r\n            `Atenci칩n, recopilando informaci칩n de ciclo`,\r\n            \"warning\"\r\n          );\r\n\r\n          const headerData = await getCycle();\r\n          if (!checkObject(headerData)) {\r\n            await linearAlert(\r\n              `Advertencia`,\r\n              `Numero de ciclo ${this.headerCycle}, no valido, abortando`,\r\n              \"warning\"\r\n            );\r\n            this.resetData();\r\n            return;\r\n          }\r\n          setHeaderData(headerData);\r\n        } else {\r\n          await linearToast(\r\n            `Atenci칩n, saltando recopilaci칩n de datos de encabezado de ciclo ${this.headerCycle}`,\r\n            \"warning\"\r\n          );\r\n        }\r\n        let weightData = await getWeightData();\r\n        if (!checkObject(weightData)) {\r\n          await linearAlert(\r\n            `Advertencia`,\r\n            `No se encontro informaci칩n de pesajes, movimientos o contenedor con ciclo ${this.headerCycle}, abortando`,\r\n            \"warning\"\r\n          );\r\n          this.resetData();\r\n          return;\r\n        }\r\n\r\n        setContainerData(weightData);\r\n        setMovementData(weightData);\r\n        if (getLastCycle && checkRegistryNumber()) {\r\n          await linearToast(\r\n            `Atenci칩n, numero de registro ${this.movementRegistryNumber}, ya contiene pesajes de salida y entrada, pasando al ultimo registro disponible, registro ${this.lastCycle}`,\r\n            \"warning\"\r\n          );\r\n          this.movementRegistryNumber = this.lastCycle;\r\n          weightData = await getWeightData();\r\n          setContainerData(weightData);\r\n          setMovementData(weightData);\r\n        }\r\n\r\n        await linearToast(`Recopilaci칩n de datos de ciclo exitoso!`, \"success\");\r\n      } catch (error) {\r\n        await linearAlert(\"Error\", error, \"error\", 3000, false);\r\n        console.error(error);\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n    async getDucaAndPolicyData() {\r\n      this.isLoading = true;\r\n      //funciones de datos\r\n      const { getDucaData, getPolicyData } = this;\r\n      //funciones de seteo de datos\r\n      const { setBlNumber, setPolicyData } = this;\r\n      //validaciones\r\n      const { checkObject } = this;\r\n      try {\r\n        await linearToast(`Atenci칩n, recopilando numero de BL`, \"warning\");\r\n\r\n        const blData = await getDucaData();\r\n        if (!checkObject(blData)) {\r\n          await linearAlert(\r\n            `Advertencia`,\r\n            `Numero de duca ${this.policyDucaNumber}, no valido, abortando`,\r\n            \"warning\"\r\n          );\r\n          return;\r\n        }\r\n        setBlNumber(blData);\r\n        await linearToast(\r\n          `Atenci칩n, recopilando datos de poliza con numero de BL ${this.policyBlNumber}`,\r\n          \"warning\"\r\n        );\r\n        let policyData = await getPolicyData();\r\n        if (!checkObject(policyData)) {\r\n          await linearAlert(\r\n            `Advertencia`,\r\n            `No se encontro informaci칩n de poliza, abortando`,\r\n            \"warning\"\r\n          );\r\n          this.setBlNumber({ BL: null });\r\n          return;\r\n        }\r\n        setPolicyData(policyData);\r\n        await linearToast(\r\n          `Recopilaci칩n de datos de poliza exitoso!`,\r\n          \"success\"\r\n        );\r\n      } catch (error) {\r\n        await linearAlert(\"Error\", error, \"error\", 3000, false);\r\n        console.error(error);\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n    async policyDataHandler() {\r\n      this.isLoading = true;\r\n      //funciones de datos\r\n      const { getPolicyData } = this;\r\n      //funciones de seteo de datos\r\n      const { setPolicyData } = this;\r\n      //validaciones\r\n      //datos\r\n      try {\r\n        await linearToast(\r\n          `Atenci칩n, recopilando informaci칩n de poliza`,\r\n          \"warning\"\r\n        );\r\n        const policyData = await getPolicyData();\r\n        setPolicyData(policyData);\r\n        await linearToast(`Recopilaci칩n de datos de ciclo exitoso!`, \"success\");\r\n      } catch (error) {\r\n        await linearAlert(\"Error\", error, \"error\", 3000, false);\r\n        console.error(error);\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n    async getAppointment() {\r\n      if (this.isContainerNumberSet) {\r\n        const { containerNumber } = this;\r\n        try {\r\n          const { data } = await cycleService.getAppointment({\r\n            containerNumber: containerNumber,\r\n          });\r\n          const { TIPO_RESPUESTA } = data;\r\n          if (TIPO_RESPUESTA[\"RESULTADO\"] === \"01\") {\r\n            const { PARAMETROS_SALIDA } = data;\r\n            return PARAMETROS_SALIDA;\r\n          } else\r\n            await linearAlert(\r\n              \"Advertencia\",\r\n              TIPO_RESPUESTA[\"DESCRIPCION\"],\r\n              \"warning\"\r\n            );\r\n          return null;\r\n        } catch (error) {\r\n          await linearAlert(\"Error\", error, \"error\", 3000, false);\r\n          console.error(error);\r\n          return null;\r\n        }\r\n      } else {\r\n        await linearAlert(\r\n          \"Advertencia\",\r\n          \"La cita no se pudo verificar por falta de numero de contenedor, por favor ingreselo\",\r\n          \"warning\"\r\n        );\r\n      }\r\n    },\r\n    async checkAppointment() {\r\n      this.isLoading = true;\r\n      //funciones de datos\r\n      const { getAppointment } = this;\r\n      //validaciones\r\n      const { checkObject } = this;\r\n\r\n      try {\r\n        await linearToast(\r\n          `Atenci칩n, confirmando cita de contenedor`,\r\n          \"warning\"\r\n        );\r\n        const appointmentData = await getAppointment();\r\n        if (\r\n          !checkObject(appointmentData) ||\r\n          (!appointmentData[\"CITA\"] && !appointmentData[\"PESOS\"])\r\n        ) {\r\n          if (this.isContainerNumberSet) {\r\n            await linearToast(\r\n              `Cita de contenedor no encontrada ${this.containerNumber}, proceda`,\r\n              \"success\"\r\n            );\r\n          }\r\n          return;\r\n        } else {\r\n          await linearAlert(\r\n            `Advertencia`,\r\n            `Cita de contenedor encontrada ${this.containerNumber}, informaci칩n de cita ${appointmentData[\"CITA\"]}, pesos ${appointmentData[\"PESOS\"]}`,\r\n            \"warning\"\r\n          );\r\n        }\r\n      } catch (error) {\r\n        await linearAlert(\"Error\", error, \"error\", 3000, false);\r\n        console.error(error);\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n    async getCorrelative() {\r\n      const basculaNumber = localStorage.getItem(\"bascula\");\r\n      try {\r\n        const { data } = await cycleService.getCorrelative({\r\n          basculaNumber,\r\n          companyNumber: 25,\r\n        });\r\n        const { TIPO_RESPUESTA } = data;\r\n        if (TIPO_RESPUESTA[\"RESULTADO\"] === \"01\") {\r\n          const { PARAMETROS_SALIDA } = data;\r\n          return PARAMETROS_SALIDA;\r\n        } else\r\n          await linearAlert(\r\n            \"Advertencia\",\r\n            TIPO_RESPUESTA[\"DESCRIPCION\"],\r\n            \"warning\"\r\n          );\r\n        return null;\r\n      } catch (error) {\r\n        await linearAlert(\"Error\", error, \"error\", 3000, false);\r\n        console.error(error);\r\n        return null;\r\n      }\r\n    },\r\n    checkRegistryNumber() {\r\n      return this.lastCycle !== 1;\r\n    },\r\n    goBackARegistryNumber() {\r\n      this.movementRegistryNumber = this.movementRegistryNumber - 1;\r\n      this.getHeaderAndWeightData(false, false);\r\n    },\r\n    gotoFirstRegistryNumber() {\r\n      this.movementRegistryNumber = 1;\r\n      this.getHeaderAndWeightData(false, false);\r\n    },\r\n    goUpARegistryNumber() {\r\n      this.movementRegistryNumber = this.movementRegistryNumber + 1;\r\n\r\n      this.getHeaderAndWeightData(false, false);\r\n    },\r\n    async checkWeight() {\r\n      try {\r\n        const basculaNumber = localStorage.getItem(\"bascula\");\r\n        const { data } = await weightService.weight({ basculaNumber });\r\n        // eslint-disable-next-line\r\n        const [peso, maquina] = data.split(\"-\");\r\n        localStorage.setItem(\"maquina\", maquina);\r\n        if (peso) {\r\n          const formattedPeso_Carga = (Number.parseFloat(peso) / 1000).toFixed(\r\n            3\r\n          );\r\n          const { isConfirmed } = await linearConfirmationAlert(\r\n            `Peso ${formattedPeso_Carga}`,\r\n            `Confirmar Peso`,\r\n            \"warning\",\r\n            \"Confirmar\",\r\n            \"Volver A Pesar\"\r\n          );\r\n\r\n          if (isConfirmed) {\r\n            const correlative = await this.getCorrelative();\r\n            this.setNewWeightData(formattedPeso_Carga, correlative);\r\n\r\n            const weightData = this.getNewWeightData();\r\n            console.log(\"weightData\", weightData);\r\n            const dataHtml = `\r\n              <p><strong>Bascula:</strong> ${weightData.bascula}</p>\r\n              <p><strong>N칰mero de Bascula:</strong> ${weightData.basculaNumber}</p>\r\n              <p><strong>N칰mero de Boleta:</strong> ${weightData.boletaNumber}</p>\r\n              <p><strong>Fecha:</strong> ${weightData.date}</p>\r\n              <p><strong>Hora:</strong> ${weightData.time}</p>\r\n              <p><strong>Peso:</strong> ${weightData.weight}</p>\r\n            `;\r\n\r\n            await linearConfirmationAlert(\r\n              `Confirmar los siguientes datos a guardar`,\r\n              null,\r\n              \"warning\",\r\n              \"Guardar\",\r\n              \"Cancelar\",\r\n              dataHtml\r\n            );\r\n          } else this.checkWeight();\r\n        } else {\r\n          await linearAlert(\r\n            \"ERROR AL LEER PESO\",\r\n            \"Error al Leer Peso, Intente de Nuevamente\",\r\n            \"error\"\r\n          );\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error in checkWeight:\", error);\r\n        await linearAlert(\"ERROR\", \"An unexpected error occurred\", \"error\");\r\n      }\r\n    },\r\n    async createCycleRegistry() {\r\n      this.isLoading = true;\r\n      //validaciones\r\n      const { checkObject } = this;\r\n      const { allInputData } = this;\r\n      try {\r\n        await linearToast(\r\n          `Atenci칩n, ingresando ciclo en base de datos local`,\r\n          \"warning\"\r\n        );\r\n      } catch (error) {\r\n        await linearAlert(\"Error\", error, \"error\", 3000, false);\r\n        console.error(error);\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n  },\r\n  computed: {\r\n    isCycleNumberSet() {\r\n      return !!this.headerCycle;\r\n    },\r\n    isCycleNumberAndBlNumberSet() {\r\n      return this.headerCycle && this.policyBlNumber;\r\n    },\r\n    isCycleNumberAndRegistryNumberSet() {\r\n      return this.headerCycle && this.movementRegistryNumber;\r\n    },\r\n    isContainerNumberSet() {\r\n      return !!this.containerNumber;\r\n    },\r\n    isDucaSet() {\r\n      return this.policyDucaNumber;\r\n    },\r\n    isGoBackARegistryNumberPossible() {\r\n      return this.movementRegistryNumber > 1;\r\n    },\r\n    weightDirection() {\r\n      const { movementEntryWeight, movementExitWeight } = this;\r\n      return movementEntryWeight === \"0\"\r\n        ? \"ENTRADA\"\r\n        : movementExitWeight === \"0\"\r\n        ? \"SALIDA\"\r\n        : \"NINGUNO\";\r\n    },\r\n    calculatedContainerNetWeight() {\r\n      if (\r\n        this.movementExitWeight &&\r\n        this.movementEntryWeight &&\r\n        this.containerTaraWeight\r\n      ) {\r\n        return (\r\n          Number.parseFloat(this.movementExitWeight) -\r\n          (Number.parseFloat(this.movementEntryWeight) +\r\n            Number.parseFloat(this.containerTaraWeight))\r\n        ).toFixed(2);\r\n      } else {\r\n        return null;\r\n      }\r\n    },\r\n    allInputData() {\r\n      const {\r\n        headerCycle,\r\n        headerCycleDate,\r\n        headerCompany,\r\n        headerLicenseNumber,\r\n        headerLicenseCountry,\r\n        headerPilot,\r\n        headerPlateCountry,\r\n        headerPlateNumber,\r\n        headerObservation,\r\n        headerTruckType,\r\n        headerEntryDate,\r\n        headerEntryHour,\r\n        //movements\r\n        movementRegistryNumber,\r\n        movementEntryWeight,\r\n        movementExitWeight,\r\n        movementEntryDate,\r\n        movementEntryTime,\r\n        movementExitDate,\r\n        movementExitTime,\r\n        movementEntryBascName,\r\n        movementEntryBascNumber,\r\n        movementExitBascName,\r\n        movementExitBascNumber,\r\n        movementEntryBoleta,\r\n        movementExitBoleta,\r\n        movementEntryTicket,\r\n        movementExitTicket,\r\n        //container\r\n        containerNumber,\r\n        containerTaraWeight,\r\n        containerLoadNetWeight,\r\n        containerShip,\r\n        containerLoadType,\r\n        containerObservations,\r\n        //policy\r\n        policyDucaNumber,\r\n        policyBlNumber,\r\n        policyCosignee,\r\n        policyManifest,\r\n        policyNumber,\r\n        policyWeight,\r\n      } = this;\r\n\r\n      return {\r\n        headerCycle,\r\n        headerCycleDate,\r\n        headerCompany,\r\n        headerLicenseNumber,\r\n        headerLicenseCountry,\r\n        headerPilot,\r\n        headerPlateCountry,\r\n        headerPlateNumber,\r\n        headerObservation,\r\n        headerTruckType,\r\n        headerEntryDate,\r\n        headerEntryHour,\r\n        //movements\r\n        movementRegistryNumber,\r\n        movementEntryWeight,\r\n        movementExitWeight,\r\n        movementEntryDate,\r\n        movementEntryTime,\r\n        movementExitDate,\r\n        movementExitTime,\r\n        movementEntryBascName,\r\n        movementEntryBascNumber,\r\n        movementExitBascName,\r\n        movementExitBascNumber,\r\n        movementEntryBoleta,\r\n        movementExitBoleta,\r\n        movementEntryTicket,\r\n        movementExitTicket,\r\n        //container\r\n        containerNumber,\r\n        containerTaraWeight,\r\n        containerLoadNetWeight,\r\n        containerShip,\r\n        containerLoadType,\r\n        containerObservations,\r\n        //policy\r\n        policyDucaNumber,\r\n        policyBlNumber,\r\n        policyCosignee,\r\n        policyManifest,\r\n        policyNumber,\r\n        policyWeight,\r\n      };\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.writeable {\r\n  font-weight: bold;\r\n}\r\ninput:not(.writeable) {\r\n  background-color: rgb(180, 180, 180);\r\n  color: rgb(0, 0, 0);\r\n  border: rgb(251, 253, 255);\r\n  font-weight: bold;\r\n}\r\n\r\n.swal2-title {\r\n  font-size: 24px !important; /* Change the size as needed */\r\n}\r\n</style>"],"names":[],"sourceRoot":""}